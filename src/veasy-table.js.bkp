angular.module('veasyTable', [
  'ui.bootstrap',
  'veasyTable.templates'
])

.directive('veasyTable', ['$window', '$filter', '$templateCache', '$timeout', '$modal', function ($window, $filter, $templateCache, $timeout, $modal) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'veasy-table.html',
    scope: {
      list: '=',
      selectedItems: '=',
      config: '='
    },
    link: function (scope, element, attributes, controller) {
      var init = function () {
        addResizeEventOnWindow();
        scope.isLoading = true;

        // Validate Config
        validateCheckbox();
        validatePagination();
        validateFilter();
        validateColumnFilter();
        validateSort();
        validateResizable();
        validateEvents();
        validateTranslate();

        // Others
        scope.dragColIndex;
        scope.initialPosition;
        scope.direction;
        scope.predicate = '';
        scope.reverse = false;
        scope.query = '';
        scope.condition = 'AND';
        scope.colspan = 1;
        scope.visibleColumns = [];
        scope.paginatedList = [];
        scope.filteredList = [];


        scope.cbs = [];

        scope.search();

        for (var i = 0; i < scope.filteredList.length; i++) {
          scope.cbs[i] = false;
        };
      };

      scope.$watch(function () {
        return angular.element('#' + scope.config.id).width();
      }, function (newTableSize) {
        scope.tableWidth = newTableSize;

        if (scope.isLoading) {
          var minimumColumnSizePercent = angular.copy(scope.config.resizable.minimumSize);
          scope.config.resizable.minimumSize = (newTableSize * scope.config.resizable.minimumSize) / 100;

          setColumnsSizeOnLoad(newTableSize, minimumColumnSizePercent);
        }
      });



      var resetAllColumnsSize = function (array) {
        scope.$apply(function () {
          angular.forEach(array, function (column, index) {
            column.size = 0;
          });
        });
      };

      var addResizeEventOnWindow = function () {
        $window.addEventListener('resize', function () {
          var backup = angular.copy(scope.visibleColumns);

          angular.forEach(backup, function (column) {
            column.size = (column.size * 100) / scope.tableWidth;
          });

          resetAllColumnsSize(scope.visibleColumns);
          scope.tableWidth = getTableSize();

          angular.forEach(backup, function (column) {
            column.size = (column.size * scope.tableWidth) / 100;
          });

          scope.$apply(function () {
            scope.visibleColumns = backup;
          });
        });
      };

      var validateCheckbox = function () {
        if (!scope.config.checkbox) {
          scope.config.checkbox = {
            enable: false,
            size: 0
          };
        }

        if (scope.config.checkbox.enable) {
          if (!scope.config.checkbox.size || scope.config.checkbox.size < 20)
            scope.config.checkbox.size = 20;
        }
      };

      var validatePagination = function () {
        if (!scope.config.pagination) {
          scope.config.pagination = {
            enable: false,
            currentPage: 0,
            itemsPerPage: scope.list.length || 10
          };
        }

        if (scope.config.pagination.enable) {
          if (!scope.config.pagination.currentPage || scope.config.pagination.currentPage <= 0)
            scope.config.pagination.currentPage = 0;
          else {
            scope.config.pagination.currentPage -= 1;
          }
          if (!scope.config.pagination.itemsPerPage)
            scope.config.pagination.itemsPerPage = 10;
        }
      };

      var validateFilter = function () {
        if (!scope.config.filter) {
          scope.config.filter = {
            enable: false,
            conditional: false
          };
        }

        if (scope.config.filter.enable) {
          if (!scope.config.filter.conditional)
            scope.config.filter.conditional = false;
        }
      };

      var validateColumnFilter = function () {
        if (!scope.config.columnFilter) {
          scope.config.columnFilter = {
            enable: false
          };
        }

        if (scope.config.columnFilter.enable) {
          if (!scope.config.columnFilter.autoOpen)
            scope.config.columnFilter.autoOpen = false;

          if (!scope.config.columnFilter.modalSize)
            scope.config.columnFilter.modalSize = 'sm';
        }
      };

      var validateSort = function () {
        if (!scope.config.sort) {
          scope.config.sort = {
            enable: false
          };
        }
      };

      var validateResizable = function () {
        if (!scope.config.resizable) {
          scope.config.resizable = {
            enable: false
          };
        }

        if (scope.config.resizable.enable) {
          if (!scope.config.resizable.minimumSize || scope.config.resizable.minimumSize < 1)
            scope.config.resizable.minimumSize = 5;
        }
      };

      var validateEvents = function () {
        if (!scope.config.events) scope.config.events = {};
        if (!scope.config.events.onClickRow) scope.config.events.onClickRow = undefined;
        if (!scope.config.events.onApplyColumnFilter) scope.config.events.onApplyColumnFilter = undefined;
      };

      var validateTranslate = function () {
        if (!scope.config.i18n) scope.config.i18n = {};
        // Filter
        if (!scope.config.i18n.filter) scope.config.i18n.filter = {};
        if (!scope.config.i18n.filter.by) scope.config.i18n.filter.by = 'Filter by...';
        if (!scope.config.i18n.filter.and) scope.config.i18n.filter.and = 'AND';
        if (!scope.config.i18n.filter.or) scope.config.i18n.filter.or = 'OR';
        // Pagination
        if (!scope.config.i18n.pagination) scope.config.i18n.pagination = {};
        if (!scope.config.i18n.pagination.itemsByPage) scope.config.i18n.pagination.itemsByPage = 'Items by Page';
        if (!scope.config.i18n.pagination.totalItems) scope.config.i18n.pagination.totalItems = 'Total Items';
        // Column Filter
        if (!scope.config.i18n.columnFilter) scope.config.i18n.columnFilter = {};
        if (!scope.config.i18n.columnFilter.title) scope.config.i18n.columnFilter.title = 'Which columns you want to display?';
        if (!scope.config.i18n.columnFilter.okButton) scope.config.i18n.columnFilter.okButton = 'Ok';
        if (!scope.config.i18n.columnFilter.cancelButton) scope.config.i18n.columnFilter.cancelButton = 'Cancel';
      };

      // /*
      //  * ============================ Checkbox Controller ============================
      //  */

      // scope.checkboxSize = function () {
      //   return scope.config.checkbox.size + 'px';
      // }

      // scope.getIndex = function (row) {
      //   return scope.filteredList.indexOf(row);
      // };

      // scope.checkRow = function (row) {
      //   var index = scope.getIndex(row);
      //   var checkbox = scope.cbs[index];
      //   var position = scope.selectedItems.indexOf(row);

      //   if (checkbox && position === -1) {
      //     scope.selectedItems.push(row);
      //   }

      //   if (checkbox && position > -1) {
      //     scope.selectedItems.splice(position, 1);
      //     scope.cbs[index] = false;
      //   }

      //   if (!checkbox && position > -1) {
      //     scope.selectedItems.splice(position, 1);
      //   }
      // };

      // scope.checkAllRows = function (checkbox) {
      //   angular.forEach(scope.paginatedList, function (group) {
      //     angular.forEach(group, function (item, index) {
      //       scope.cbs[scope.getIndex(item)] = checkbox;
      //       scope.checkRow(item);
      //     });
      //   });
      // };

      // var checkSelectedCheckboxes = function () {
      //   angular.forEach(scope.selectedItems, function (item) {
      //     scope.cbs[scope.getIndex(item)] = true;
      //   });
      // };

      /*
      //  * ============================ Filter Controller ============================
      //  */


      // /*
      //  * ============================ OrderBy Controller ============================
      //  */



      // /*
      //  * ============================ Pagination Controller ============================
      //  */



      // /*
      //  * ============================ Filter Column Controller ============================
      //  */



      // /*
      //  * ============================ Resizable ============================
      //  */



      // /*
      //  * ============================== Events ==============================
      //  */

      // scope.onClickRow = function (selectedRow) {
      //   if (scope.config.events.onClickRow) {
      //     var row = angular.copy(selectedRow);

      //     if (row.$$hashKey)
      //       delete row.$$hashKey;

      //     scope.config.events.onClickRow(row);
      //   }
      // };

      // scope.onApplyColumnFilter = function (columns) {
      //   if (scope.config.events.onApplyColumnFilter) {
      //     var tableWidth = angular.copy(scope.tableWidth);

      //     if (scope.config.checkbox.enable)
      //       tableWidth -= scope.config.checkbox.size;

      //     angular.forEach(columns, function (column, index) {
      //       column.size = (column.size * 100) / tableWidth;
      //     });

      //     scope.config.events.onApplyColumnFilter(columns);
      //   }
      // };

      init();

    }
  };
}])


